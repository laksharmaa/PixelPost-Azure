import React, { useState, useEffect } from 'react';
import { Loader, Card, FormField } from '../components';

const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />)
  }

  return (
    <h2 className='mt-5 font-bold text-[#ffffff] text-xl uppercase'>
      {title}
    </h2>
  )
}

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch('http://localhost:8080/api/v1/post', {
        method: 'GET',
        headers: {
          'Content-type': 'application/json',
        },
      });

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }

    } catch (error) {
      alert(error)
    } finally {
      setLoading(false)
    }
  };

  useEffect(() => {
    fetchPosts();
  }, [])

  const handleSearchChange = (e) => {
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter((item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );

        setSearchedResults(searchResults);
      }, 500)
    );
  }

  return (
    <section className='max-w-7xl mx-auto bg-gray-900 text-white min-h-screen p-8'>
      <div>
        <h1 className='font-extrabold text-white text-[32px]'>The Community Showcase</h1>
        <p className='mt-2 text-[#d1d5db] text-[16px] max-w-[500px]'>Browse through the image of imaginative images generated by AI</p>
      </div>
      <div className='mt-16'>
        <FormField 
          labelName="Search posts"
          type="text"
          name="text" 
          placeholder="Search..."
          value={searchText}
          handleChange={handleSearchChange}
          className="bg-gray-800 text-white border border-gray-700 rounded-lg"
        />
      </div>

      <div className='mt-10'>
        {loading ? (
          <div className='flex justify-center items-center'>
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className='font-medium text-[#d1d5db] text-xl mb-3'>
                Showing results for <span className='text-white'>{searchText}</span>
              </h2>
            )}

            <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No search results found"
                />
              ) : (
                <RenderCards
                  data={allPosts}
                  title='No Posts found'
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  )
}

export default Home;
